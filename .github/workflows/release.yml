name: Build and Release

on:
  workflow_dispatch: # run manually
  release:
    types: [ created ]

jobs:
  # --------------------------
  # Step 1: Build frontend
  # --------------------------
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build rust-wasm
        run: |
          cd rust-wasm
          wasm-pack build --target web --out-dir ../web/pkg -- --features wasm --color=always
          cd ..

      - name: Build web frontend
        run: |
          cd web
          npm install
          npm run build
          cd ..

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-frontend
          path: web/dist

  # --------------------------
  # Step 2: Build Binaries
  # --------------------------
  build-binaries:
    needs: build-frontend
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Install Zig
        run: |
          sudo apt-get update
          sudo apt-get install -y zig
          rustup target add ${{ matrix.target }}

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: web-frontend
          path: web/dist

      - name: Build binary
        run: |
          cargo clean
          AWS_LC_SYS_PREGENERATED_BINDINGS=1 cargo zigbuild --release --package wg-rusteze --bin wg-rusteze --target=${{ matrix.target }}

      - name: Package binary + completions
        run: |
          mkdir -p dist/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/wg-rusteze dist/${{ matrix.target }}/
          cp -r target/${{ matrix.target }}/release/completions dist/${{ matrix.target }}/
          tar -czf dist/wg-rusteze-${{ matrix.target }}.tar.gz -C dist/${{ matrix.target }} .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wg-rusteze-${{ matrix.target }}
          path: dist/wg-rusteze-${{ matrix.target }}.tar.gz

  # --------------------------
  # Step 3: Publish to GitHub Release
  # --------------------------
  release:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -R ./artifacts

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

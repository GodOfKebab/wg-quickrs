name: Build and Release

on:
  workflow_dispatch: # run manually
  release:
    types: [ created ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      web-dist-dir: ${{ steps.web-dist.outputs.web-dist-dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build rust-wasm
        id: wasm-pkg
        run: |
          cd rust-wasm
          wasm-pack build --target web --out-dir ../web/pkg -- --features wasm --color=always
          cd ..

      - name: Build web frontend
        id: web-dist
        run: |
          cd web
          npm install
          npm run build
          cd ..
          echo "web-dist-dir=web/dist" >> $GITHUB_OUTPUT

  build-binaries:
    needs: build-frontend
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Copy pre-built frontend
        run: |
          cp -r ${{ needs.build-frontend.outputs.web-dist-dir }} web/dist

      - name: Build
        run: |
          cargo build --release --package wg-rusteze --bin wg-rusteze --target ${{ matrix.target }}

      - name: Prepare artifact
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/wg-rusteze dist/wg-rusteze-${{ matrix.target }}
          cp -r target/${{ matrix.target }}/release/completions release/${{ matrix.target }}/
          tar -czf wg-rusteze-${{ matrix.target }}.tar.gz -C dist wg-rusteze-${{ matrix.target }}

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: wg-rusteze-${{ matrix.target }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Attach Binaries to Release
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: ls -R ./artifacts

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
